syntax = "proto3";


// import 'nanopb.proto';


message RpcPacketRequest {
  PacketType type = 1;
  uint32 channel_id = 2;
  fixed32 service_id = 3;
  fixed32 method_id = 4;
  bytes payload = 5;
  uint32 status = 6;
  uint32 call_id = 7;
}

message RpcPacketResponse {
  PacketType type = 1;
  uint32 channel_id = 2;
  fixed32 service_id = 3;
  fixed32 method_id = 4;
  bytes payload = 5;
  uint32 status = 6;
  uint32 call_id = 7;
}


// Enumerate standard gRPC status codes.
enum GrpcStatus {
  OK = 0;
  CANCELLED = 1;
  UNKNOWN = 2;
  INVALID_ARGUMENT = 3;
  DEADLINE_EXCEEDED = 4;
  NOT_FOUND = 5;
  ALREADY_EXISTS = 6;
  PERMISSION_DENIED = 7;
  UNAUTHENTICATED = 16;
  RESOURCE_EXHAUSTED = 8;
  FAILED_PRECONDITION = 9;
  ABORTED = 10;
  OUT_OF_RANGE = 11;
  UNIMPLEMENTED = 12;
  INTERNAL = 13;
  UNAVAILABLE = 14;
  DATA_LOSS = 15;
}

enum PacketType {
  // To simplify identifying the origin of a packet, client-to-server packets
  // use even numbers and server-to-client packets use odd numbers.

  // Client-to-server packets

  // The client invokes an RPC. Always the first packet.
  REQUEST = 0;

  // A message in a client stream. Always sent after a REQUEST and before a
  // CLIENT_REQUEST_COMPLETION.
  CLIENT_STREAM = 2;

  // The client received a packet for an RPC it did not request.
  CLIENT_ERROR = 4;

  // Client has requested for call completion. In client streaming and
  // bi-directional streaming RPCs, this also indicates that the client is done
  // with sending requests.
  CLIENT_REQUEST_COMPLETION = 8;

  // Server-to-client packets

  // The RPC has finished.
  RESPONSE = 1;

  // The server was unable to process a request.
  SERVER_ERROR = 5;

  // A message in a server stream.
  SERVER_STREAM = 7;

  // Reserve field numbers for deprecated PacketTypes.
  reserved 3;  // SERVER_STREAM_END (equivalent to RESPONSE now)
  reserved 6;  // CANCEL (replaced by CLIENT_ERROR with status CANCELLED)
}